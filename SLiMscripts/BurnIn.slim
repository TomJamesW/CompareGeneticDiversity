// set up a simple neutral simulation
initialize() {
	initializeSLiMOptions(nucleotideBased=T);
	defineConstant("L", 8000);   // length of genome
	initializeAncestralNucleotides(randomNucleotides(L)); //random initial nucleotides
	// m1 mutation type: neutral
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1, mmJukesCantor(4e-5));
	
	//define how often to output VCF files
	//defineConstant("steps",50); defineConstant("endpoint",1000); defineConstant("popsize", 200); 
	//defineConstant("wd", );
	defineConstant("simID", getSeed());
	
	// uniform chromosome of length 100 with uniform recombination
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}

// 
1 {
	sim.addSubpop("p1", popsize);
	p1.setCloningRate(1.0);		//required for haploid data
}

//HAPLOID CODE
late() {
	// remove any new mutations added to the disabled diploid genomes
	sim.subpopulations.individuals.genome2.removeMutations();
	
	// remove mutations in the haploid genomes that have fixed
	muts = sim.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(NULL, muts);
	
	if (any(freqs == 0.5))
		sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}


// output vcf files


//1 early() { 
//	g = sim.subpopulations.individuals.genomes;
//	fp = paste0(c("../vcffiles/burnin",simID,"-0.vcf"));
//	g.outputVCF(filePath = fp, simplifyNucleotides=F);
//sim.outputFull(); 
//}

1:3000 late() {
	gen = sim.generation;
	
	if (gen <= endpoint & gen%steps == 0){
		g = sim.subpopulations.individuals.genomes;
		//g.outputVCF(simplifyNucleotides=T);
		fp = paste0(c("../vcffiles/burnin",simID,"-",gen,".vcf"));
		g.outputVCF(filePath = fp, simplifyNucleotides=T);
		//sim.outputFull();
		//print(gen);
	}
}

2000 late() {
	print('Simulation complete');
}