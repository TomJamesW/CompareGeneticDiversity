// set up a simple neutral simulation
initialize() {
	initializeSLiMOptions(nucleotideBased=T);
	defineConstant("L", 8000);   // length of genome
	initializeAncestralNucleotides(randomNucleotides(L)); //random initial nucleotides
	// m1 mutation type: neutral
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1, mmJukesCantor(4e-5)); //overall mut rate = 3*(4e-5)
	
	//define how often to output VCF files
	//defineConstant("steps",500); defineConstant("endpoint",10000); defineConstant("popsize", 100); defineConstant("numpops", 2); 
	//defineConstant("wd", "~/Documents/geneticdiversity");
	defineConstant("simID", getSeed());
	
	// uniform chromosome of length 100 with uniform recombination
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-8);
}

// 
1 {
	sim.addSubpop("p1", popsize);
	sim.subpopulations.setCloningRate(1.0);		//required for haploid data
	
}

 //HAPLOID CODE
late() {
	// remove any new mutations added to the disabled diploid genomes
	sim.subpopulations.individuals.genome2.removeMutations();
	
	// remove mutations in the haploid genomes that have fixed
	muts = sim.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(NULL, muts);
	
	if (any(freqs == 0.5))
		sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}


1:1000 late() { 
	gen = sim.generation;
	if (gen%steps==0){
	g = sim.subpopulations.individuals.genomes;
	//g.outputVCF(simplifyNucleotides=T);
	fp = paste0(c("~/Documents/geneticdiversity/vcffiles/burninsplit",simID,"-",gen,".vcf"));
	g.outputVCF(filePath = fp, simplifyNucleotides=T);
	//sim.outputFull();
	print(gen);
	} 
}


// Split into subpops:
1000 late() {
	for (i in 2:numpops){
		sim.addSubpopSplit(i, popsize, p1);
	}
	sim.subpopulations.setCloningRate(1.0);
}

// output vcf files


1001:11000 late() { 
	gen = sim.generation;
	
	if (gen-1000 <= endpoint & gen%steps==0){
	g = sim.subpopulations.individuals.genomes;
	//g.outputVCF(simplifyNucleotides=T);
	fp = paste0(c("~/Documents/geneticdiversity/vcffiles/burninsplit",simID,"-",gen,".vcf"));
	g.outputVCF(filePath = fp, simplifyNucleotides=T);
	//sim.outputFull();
	//print(gen);
	} 
}

11000 late() {
print('Simulation complete.');
}


